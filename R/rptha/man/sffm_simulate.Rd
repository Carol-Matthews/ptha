% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_simulate_earthquake.R
\name{sffm_simulate}
\alias{sffm_simulate}
\title{Synthetic finite fault model generator}
\usage{
sffm_simulate(reg_par, tg_mat, sffm_pars = .sffm_default_model_parameters)
}
\arguments{
\item{reg_par}{vector passed to sffm_pars$spectral_amplitude_fun. First
two entries are kcxN, kcyN, in NUMERICAL SPACE as explained above.}

\item{tg_mat}{is a 'template' raster, or matrix}

\item{sffm_pars}{list containing sffm configuration parameters. See
sffm_get_default_model_parameters()}
}
\value{
Output is the same class as tg_mat
}
\description{
Make a random slip surface from a template raster, given some regression
parameters (specified in NUMERICAL SPACE independent of the pixel size) and 
SFFM definitions in sffm_pars \cr
If kx = 0,1/N,2/N, ... are the numerical wavenumbers,
they are equal to the ('physical' wavenumbers) x (dx) \cr
where dx is the raster x-cell size. \cr
In that case, if reg_par[1] and reg_par[2] are the numerical corner 
wavenumbers, then: \cr
reg_par[1] = kcxN = kcx*dx  \cr
[where kcx is the physical 'corner wavenumber'], and similarly for
reg_par[2] = kcyN = kcy*dy
}
\examples{

#
# Example simulating an SFFM
#

tg_mat = matrix(0, nrow=8, ncol=12)
tg_mat[3,5] = 1 # Fix peak slip location
xs = seq(0, 120, len=ncol(tg_mat)) # x-coordinates of tg_mat
ys = seq(0, 50, len=nrow(tg_mat)) # y-coordinates of tg_mat
dx = xs[2] - xs[1]
dy = ys[2] - ys[1]
# Make numerical corner wavenumbers c(kcxN, kcyN), corresponding to physical
# corner wavenumbers 1/50, 1/20
reg_par = c(1/50 * dx, 1/20 * dy) 
random_slip_mat = sffm_simulate(reg_par, tg_mat)

## Example plot
filled.contour(xs, ys, t(random_slip_mat), asp=1, nlevels=30, 
    color.palette=rainbow)

# Clipping should lead to patches of zero slip
stopifnot(min(random_slip_mat) == 0)

#
# Example changing default parameters
#

new_sffm_parameters = sffm_get_default_model_parameters()
# Use absolute-value transformation to remove negative values, instead of clipping
new_sffm_parameters$negative_slip_removal_function <-function(x) abs(x)
# ... other changes could be made too ... #
random_slip_matB = sffm_simulate(reg_par, tg_mat, sffm_pars = new_sffm_parameters)

## Example plot
filled.contour(xs, ys, t(random_slip_matB), asp=1, nlevels=30, 
    color.palette=rainbow)

# Should no longer be patches of zero values
stopifnot(min(random_slip_matB) > 0)

}

