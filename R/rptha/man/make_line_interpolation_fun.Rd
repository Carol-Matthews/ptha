% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downdip_3d_lines_on_source.R
\name{make_line_interpolation_fun}
\alias{make_line_interpolation_fun}
\title{Normalised distance based interpolation along a line
Make a function to interpolate along a line defined by sorted x,y
coordinates. The user must provide an along-line distance for each point
along the line (as the coordinates might not be cartesian, e.g. if x/y define
lon/lat coordinates). The output function F:[0,1] --> (x,y) with F(0) being
the first point on the line and F(1) being the last point, and e.g.  F(0.5)
being halfway along the line.}
\usage{
make_line_interpolation_fun(coords, distance)
}
\arguments{
\item{coords}{matrix with at least 2 columns giving the x,y coordinates of the line}

\item{distance}{numeric vector with (length = nrow(coords)) giving the along
line distance of each point}
}
\value{
function F:[0-1] --> (x,y) mapping the unit interval to the line.
}
\description{
Normalised distance based interpolation along a line
Make a function to interpolate along a line defined by sorted x,y
coordinates. The user must provide an along-line distance for each point
along the line (as the coordinates might not be cartesian, e.g. if x/y define
lon/lat coordinates). The output function F:[0,1] --> (x,y) with F(0) being
the first point on the line and F(1) being the last point, and e.g.  F(0.5)
being halfway along the line.
}
\examples{
x = c(0, 1, 2, 1, 0)
y = c(0, 1, 2, 3, 2)
distance = c(0, cumsum(sqrt(diff(x)**2 + diff(y)**2)))
f = make_line_interpolation_fun(cbind(x,y), distance)
stopifnot(all(f(0) == c(0,0)))
stopifnot(all(f(1) == c(0,2)))
stopifnot(all(f(0.5) == c(2,2)))
}
